{"ast":null,"code":"export default class SwapoService {\n  constructor() {\n    this._apiBase = 'https://swapi.co/api';\n  }\n\n  async getResourse(url) {\n    const res = await fetch(\"\".concat(this._apiBase).concat(url));\n\n    if (!res.ok) {\n      throw new Error(\"could not fetch \".concat(url, \" received \").concat(res.status));\n    }\n\n    return await res.json();\n  }\n\n  async getAllPeople() {\n    const res = await this.getResourse('/people/');\n    return res.results;\n  }\n\n  async getPerson(id) {\n    const res = await this.getResourse(\"/people/\".concat(id, \"/\"));\n    return res;\n  }\n\n  async getAllPlanets() {\n    const res = await this.getResourse('/planets/');\n    return res.results.map(this._transformPlanet);\n  }\n\n  async getPlanet(id) {\n    const planet = await this.getResourse(\"/planets/\".concat(id, \"/\"));\n    return this._transformPlanet(planet);\n  }\n\n  async getAllStarships() {\n    const res = await this.getResourse('/starships/');\n    return res.results.map(this._transformStarship);\n  }\n\n  async getStarship(id) {\n    const starship = await this.getResourse(\"/starships/\".concat(id, \"/\"));\n    return this._transformStarship(starship);\n  }\n\n  _extractId(item) {\n    const regEx = /\\/(\\d*)\\/$/;\n    return item.url.match(regEx)[1];\n  }\n\n  _transformPlanet(planet) {\n    return {\n      id: this._extractId(planet),\n      name: planet.name,\n      population: planet.population,\n      diameter: planet.diameter,\n      rotation: 44\n    };\n  }\n\n  _transformStarship(starship) {\n    return {\n      id: this._transformStarship(starship),\n      model: starship.model\n    };\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Admin/Desktop/VS Code project/REACT/star-db/src/services/SwapiService.js"],"names":["SwapoService","_apiBase","getResourse","url","res","fetch","ok","Error","status","json","getAllPeople","results","getPerson","id","getAllPlanets","map","_transformPlanet","getPlanet","planet","getAllStarships","_transformStarship","getStarship","starship","_extractId","item","regEx","match","name","population","diameter","rotation","model"],"mappings":"AACA,eAAe,MAAMA,YAAN,CAAkB;AAAA;AAAA,SAC7BC,QAD6B,GACnB,sBADmB;AAAA;;AAGjC,QAAMC,WAAN,CAAkBC,GAAlB,EAAsB;AACtB,UAAMC,GAAG,GAAG,MAAMC,KAAK,WAAI,KAAKJ,QAAT,SAAoBE,GAApB,EAAvB;;AACA,QAAI,CAACC,GAAG,CAACE,EAAT,EAAa;AACT,YAAM,IAAIC,KAAJ,2BAA6BJ,GAA7B,uBAA6CC,GAAG,CAACI,MAAjD,EAAN;AACH;;AACD,WAAO,MAAMJ,GAAG,CAACK,IAAJ,EAAb;AACC;;AACD,QAAMC,YAAN,GAAqB;AACjB,UAAMN,GAAG,GAAG,MAAM,KAAKF,WAAL,CAAiB,UAAjB,CAAlB;AACA,WAAOE,GAAG,CAACO,OAAX;AACH;;AACD,QAAMC,SAAN,CAAgBC,EAAhB,EAAoB;AAChB,UAAMT,GAAG,GAAG,MAAM,KAAKF,WAAL,mBAA4BW,EAA5B,OAAlB;AACA,WAAOT,GAAP;AACH;;AACD,QAAMU,aAAN,GAAsB;AAClB,UAAMV,GAAG,GAAG,MAAM,KAAKF,WAAL,CAAiB,WAAjB,CAAlB;AACA,WAAOE,GAAG,CAACO,OAAJ,CAAYI,GAAZ,CAAgB,KAAKC,gBAArB,CAAP;AACH;;AACD,QAAMC,SAAN,CAAgBJ,EAAhB,EAAoB;AAChB,UAAMK,MAAM,GAAG,MAAM,KAAKhB,WAAL,oBAA6BW,EAA7B,OAArB;AACA,WAAO,KAAKG,gBAAL,CAAsBE,MAAtB,CAAP;AACH;;AACD,QAAMC,eAAN,GAAwB;AACpB,UAAMf,GAAG,GAAG,MAAM,KAAKF,WAAL,CAAiB,aAAjB,CAAlB;AACA,WAAOE,GAAG,CAACO,OAAJ,CAAYI,GAAZ,CAAgB,KAAKK,kBAArB,CAAP;AACH;;AACD,QAAMC,WAAN,CAAkBR,EAAlB,EAAsB;AAClB,UAAMS,QAAQ,GAAG,MAAM,KAAKpB,WAAL,sBAA+BW,EAA/B,OAAvB;AACA,WAAO,KAAKO,kBAAL,CAAwBE,QAAxB,CAAP;AACH;;AACDC,EAAAA,UAAU,CAACC,IAAD,EAAO;AACb,UAAMC,KAAK,GAAG,YAAd;AACA,WAAOD,IAAI,CAACrB,GAAL,CAASuB,KAAT,CAAeD,KAAf,EAAsB,CAAtB,CAAP;AACH;;AACDT,EAAAA,gBAAgB,CAACE,MAAD,EAAQ;AAEpB,WAAO;AACHL,MAAAA,EAAE,EAAC,KAAKU,UAAL,CAAgBL,MAAhB,CADA;AAEHS,MAAAA,IAAI,EAAET,MAAM,CAACS,IAFV;AAGHC,MAAAA,UAAU,EAAEV,MAAM,CAACU,UAHhB;AAIHC,MAAAA,QAAQ,EAAEX,MAAM,CAACW,QAJd;AAKHC,MAAAA,QAAQ,EAAE;AALP,KAAP;AAOH;;AACDV,EAAAA,kBAAkB,CAACE,QAAD,EAAW;AAC7B,WAAM;AACFT,MAAAA,EAAE,EAAC,KAAKO,kBAAL,CAAwBE,QAAxB,CADD;AAEFS,MAAAA,KAAK,EAACT,QAAQ,CAACS;AAFb,KAAN;AAKC;;AAtDgC","sourcesContent":["\r\nexport default class SwapoService{\r\n    _apiBase= 'https://swapi.co/api';\r\n    \r\nasync getResourse(url){\r\nconst res = await fetch(`${this._apiBase}${url}`);\r\nif (!res.ok) {\r\n    throw new Error(`could not fetch ${url} received ${res.status}`)\r\n}\r\nreturn await res.json();\r\n}\r\nasync getAllPeople() {\r\n    const res = await this.getResourse('/people/');\r\n    return res.results;\r\n}\r\nasync getPerson(id) {\r\n    const res = await this.getResourse(`/people/${id}/`);\r\n    return res;\r\n}\r\nasync getAllPlanets() {\r\n    const res = await this.getResourse('/planets/');\r\n    return res.results.map(this._transformPlanet);\r\n}\r\nasync getPlanet(id) {\r\n    const planet = await this.getResourse(`/planets/${id}/`);\r\n    return this._transformPlanet(planet);\r\n}\r\nasync getAllStarships() {\r\n    const res = await this.getResourse('/starships/');\r\n    return res.results.map(this._transformStarship);\r\n}\r\nasync getStarship(id) {\r\n    const starship = await this.getResourse(`/starships/${id}/`);\r\n    return this._transformStarship(starship);\r\n}\r\n_extractId(item) {\r\n    const regEx = /\\/(\\d*)\\/$/;\r\n    return item.url.match(regEx)[1];\r\n}\r\n_transformPlanet(planet){    \r\n    \r\n    return {\r\n        id:this._extractId(planet),\r\n        name: planet.name,\r\n        population: planet.population,\r\n        diameter: planet.diameter,\r\n        rotation: 44\r\n      }\r\n}\r\n_transformStarship(starship) {\r\nreturn{\r\n    id:this._transformStarship(starship),\r\n    model:starship.model,\r\n    \r\n}\r\n}\r\n}\r\n"]},"metadata":{},"sourceType":"module"}