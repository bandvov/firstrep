{"ast":null,"code":"export default class SwapoService {\n  constructor() {\n    this._apiBase = \"https://swapi.co/api\";\n  }\n\n  async getResourse(url) {\n    const res = await fetch(\"\".concat(this._apiBase).concat(url));\n\n    if (!res.ok) {\n      throw new Error(\"could not fetch \".concat(url, \" received \").concat(res.status));\n    }\n\n    return await res.json();\n  }\n\n  async getAllPeople() {\n    const res = await this.getResourse(\"/people/\");\n    return res.results.map(this._transformPerson);\n  }\n\n  async getPerson(id) {\n    const person = await this.getResourse(\"/people/\".concat(id, \"/\"));\n    return this._transformPerson(person);\n  }\n\n  async getAllPlanets() {\n    const res = await this.getResourse(\"/planets/\");\n    return res.results.map(this._transformPlanet);\n  }\n\n  async getPlanet(id) {\n    const planet = await this.getResourse(\"/planets/\".concat(id, \"/\"));\n    return this._transformPlanet(planet);\n  }\n\n  async getAllStarships() {\n    const res = await this.getResourse(\"/starships/\");\n    return res.results.map(this._transformStarship);\n  }\n\n  async getStarship(id) {\n    const starship = await this.getResourse(\"/starships/\".concat(id, \"/\"));\n    return this._transformStarship(starship);\n  }\n\n  _extractId(item) {\n    const regEx = /\\/(\\d*)\\/$/;\n    return item.url.match(regEx)[1];\n  }\n\n  _transformPlanet(planet) {\n    return {\n      id: this._extractId(planet),\n      name: planet.name,\n      population: planet.population,\n      diameter: planet.diameter,\n      rotation: 44\n    };\n  }\n\n  _transformStarship(starship) {\n    return {\n      id: this._transformStarship(starship),\n      model: starship.model,\n      length: starship.length,\n      crew: starship.crew,\n      passangers: starship.passangers,\n      cargoCapacity: starship.cargoCapacity\n    };\n  }\n\n  _transformPerson(person) {\n    return {\n      id: this._extractId(person),\n      name: person.name,\n      gender: person.gender,\n      birthYear: person.birthYear,\n      eyeColor: person.eyeColor\n    };\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Admin/Desktop/VS Code project/REACT/star-db/src/services/SwapiService.js"],"names":["SwapoService","_apiBase","getResourse","url","res","fetch","ok","Error","status","json","getAllPeople","results","map","_transformPerson","getPerson","id","person","getAllPlanets","_transformPlanet","getPlanet","planet","getAllStarships","_transformStarship","getStarship","starship","_extractId","item","regEx","match","name","population","diameter","rotation","model","length","crew","passangers","cargoCapacity","gender","birthYear","eyeColor"],"mappings":"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","sourcesContent":["export default class SwapoService {\r\n  _apiBase = \"https://swapi.co/api\";\r\n\r\n  async getResourse(url) {\r\n    const res = await fetch(`${this._apiBase}${url}`);\r\n    if (!res.ok) {\r\n      throw new Error(`could not fetch ${url} received ${res.status}`);\r\n    }\r\n    return await res.json();\r\n  }\r\n  async getAllPeople() {\r\n    const res = await this.getResourse(\"/people/\");\r\n    return res.results.map(this._transformPerson);\r\n  }\r\n  async getPerson(id) {\r\n    const person = await this.getResourse(`/people/${id}/`);\r\n    return this._transformPerson(person);\r\n  }\r\n  async getAllPlanets() {\r\n    const res = await this.getResourse(\"/planets/\");\r\n    return res.results.map(this._transformPlanet);\r\n  }\r\n  async getPlanet(id) {\r\n    const planet = await this.getResourse(`/planets/${id}/`);\r\n    return this._transformPlanet(planet);\r\n  }\r\n  async getAllStarships() {\r\n    const res = await this.getResourse(\"/starships/\");\r\n    return res.results.map(this._transformStarship);\r\n  }\r\n  async getStarship(id) {\r\n    const starship = await this.getResourse(`/starships/${id}/`);\r\n    return this._transformStarship(starship);\r\n  }\r\n  _extractId(item) {\r\n    const regEx = /\\/(\\d*)\\/$/;\r\n    return item.url.match(regEx)[1];\r\n  }\r\n  _transformPlanet(planet) {\r\n    return {\r\n      id: this._extractId(planet),\r\n      name: planet.name,\r\n      population: planet.population,\r\n      diameter: planet.diameter,\r\n      rotation: 44\r\n    };\r\n  }\r\n  _transformStarship(starship) {\r\n    return {\r\n      id: this._transformStarship(starship),\r\n      model: starship.model,\r\n      length: starship.length,\r\n      crew: starship.crew,\r\n      passangers: starship.passangers,\r\n      cargoCapacity: starship.cargoCapacity\r\n    };\r\n  }\r\n  _transformPerson(person) {\r\n    return {\r\n      id: this._extractId(person),\r\n      name: person.name,\r\n      gender: person.gender,\r\n      birthYear: person.birthYear,\r\n      eyeColor: person.eyeColor\r\n    };\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}